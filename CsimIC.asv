classdef CsimIC < CmodeloNA
    % CsimIC Classe para criacao do objeto de simulacao, reconstrucao do
    % sinal e avaliacao objetiva dos resultados
    
    properties
        nome_sinal_reconst % Nome do arquivo gerado para o sinal reconstruido
        audio_reconst % Sinal de audio reconstruido
        carrier = 'Harmonic Complex'; % Carrier (sinal portador) do vocoder: 'Ruido', 'Senoidal' e 'Harmonic Complex'
        tipo_vocoder = 'Neural'; % 'Normal' ou 'Neural'
        tipo_espec = 'Wavelet'; % Tipo de espectograma: 'Wavelet', 'FFT'
        SRMR_NH % Valor da metrica SRMR-NH
        SRMR_IC % Valor da metrica SRMR-CI
        Intel_SRMR_NH % Previsao da inteligibilidade para a metrica SRMR-NH
        Intel_SRMR_IC % Previsao da inteligibilidade para a metrica SRMR-CI
    end

    
    methods
        function obj = CsimIC(arquivo_dat,nome_sinal_entrada) % Funcao geral da Classe           
            obj@CmodeloNA(arquivo_dat,nome_sinal_entrada);
        end
       
        function vocoder(obj,flag) % Reconstrucao atraves do vocder: 'Normal' ou 'Ne'
            switch(obj.tipo_vocoder)
                
                case 'Normal'
                obj.audio_reconst = vocoder(obj.Csinal_processador.env,obj.freq_amost,...
                obj.carrier,obj.bandas_freq_entrada,...
                obj.sup_freq,obj.inf_freq,...
                obj.vet_tempo);
                    if flag == 1
                        nv = '_vocoder_hc.wav';
                        audiowrite(char(strcat(obj.nome_sinal_reconst,nv)),saida,obj.freq_amost)
                    end
                    
                case 'Neural'
                    obj.audio_reconst = neural_vocoder(obj.Ap,obj.freq_amost,obj.carrier,obj.dtn_A,obj.pos_eletrodo);
                    if flag == 1
                        nv = strcat('_neural_vocoder_hc','.wav');
                        audiowrite(char(strcat(obj.nome_sinal_reconst,nv)),obj.audio_reconst,obj.freq_amost)
                    end
            end
        end
        
        
        function plotSpikes(obj)
            [y,x] = find(obj.spike_matrix);
            x = x/(2*obj.freq_amost_pulsos);
            figure()
            plot(x,y,'.k','MarkerSize',2)
            ylim([0 max(y)])
            xlabel('Tempo(s)')
            ylabel('Neurônio "n" (da base (0) ao ápice (N))')
            set(gca,'Ydir','reverse')
        end
        
        function plotEletrodograma(obj)
            canal_min = 1;
            canal_max = obj.num_canais;
            figure()
            for n = 1:canal_max
                h = subplot(obj.num_canais-canal_min+1,1,n);
                vn = strcat('E',num2str(n));
                tc = obj.Csinal_processador.amp_pulsos.(vn);
                stem(tc(:,1),tc(:,2),'k','Marker','none');
                ylim([0 obj.max_corr])
                set(h,'XTick',[])
                set(h,'YTick',[])
                set(h,'FontSize',8)
                set(h,'yscale','log')
                ylabel(strcat('',num2str(n)))
                if n == canal_max
                    set(h,'XTick',0:0.1:max(obj.vet_tempo),'TickDir','out')
                    xlim([0 max(obj.vet_tempo)])
                    xlabel('t(s)')
                end
            suplabel('Número do eletrodo','y',[.125 .125 .8 .8]);
            end
            
        end
        
        function plotEspectrograma(obj)
            switch obj.tipo_espec               
                case 'Wavelet'
                    figure()
                    level = 6;
                    wpt = wpdec(obj.Csinal_processador.in,level,'sym8');
                    [Spec,Time,Freq] = wpspectrum(wpt,obj.freq_amost);
                    surf(Time,fliplr(Freq),10*log10(abs(Spec)),'EdgeColor','none');
                    set(gca,'yscale','log')
                    axis xy; 
                    axis tight;
                    colormap(jet);
                    view(0,90);
                    ylabel('f(Hz)');
                    xlabel('t(s)'); 
                    
                case 'FFT'                    
                    figure();        
                    [p,f,t] = spectrogram(obj.Csinal_processador.in,256,120,256,obj.freq_amost,'yaxis');
                    surf(t,f,10*log10(abs(p)),'EdgeColor','none');
                    axis xy; 
                    axis tight;
                    set(gca,'yscale','log');
                    xlim([0 0.1])
                    ylim([0 8e3])
                    colormap(jet);
                    view(0,90);
                    ylabel('f(Hz)');
                    xlabel('t(s)');                 
            end
        end
        
        function plotNeurograma(obj)
                x_Ap = (1:size(obj.Ap,2))*obj.dtn_A/2;
                y_Ap = 1:size(obj.Ap,1);
                figure()
                surface(x_Ap,y_Ap,obj.Ap,'EdgeColor','none')
                c = colorbar;
                colormap(jet)
                ylim([1 obj.num_canais])
                xlim([obj.dtn_A max(x_Ap)])
                xlabel('Tempo(s)')
                ylabel('População no eletrodo "N" (da base ao ápice)')
                ylabel(c,'Taxa de disparos (spikes/s)')
                view(0, 270)
        end
        
        function plotFiltros(obj)
             switch obj.tipo_filtro
                 case 'Gammatone'
                    np = 2048;
                    y = cochlearFilterBank(obj.freq_amost, obj.num_canais,obj.central_freq(1), [1 zeros(1,(np-1))]);
                    resp = 20*log10(abs(fft(y')));
                    freqScale = (0:(np-1))/np*obj.freq_amost;
                    figure()
                    semilogx(freqScale(1:(np/2-1)),resp(1:(np/2-1),:),'LineWidth',1);
                    axis([1e2 0.8e4 -30 0])
                    xlabel('Frequência (Hz)','FontSize',10);
                    ylabel('Resposta (dB)','FontSize',10); 
                 
                 case 'Nucleus'
                    np = 2048;
                    y = CIFilterBank(obj.freq_amost, obj.num_canais,obj.central_freq(1), [1 zeros(1,(np-1))], obj.bandas_freq_entrada(1:obj.num_canais));
                    resp = 20*log10(abs(fft(y')));
                    freqScale = (0:(np-1))/np*obj.freq_amost;
                    figure()
                    semilogx(freqScale(1:(np/2-1)),resp(1:(np/2-1),:),'LineWidth',1);
                    axis([1e2 0.8e4 -30 0])
                    xlabel('Frequência (Hz)','FontSize',10);
                    ylabel('Resposta (dB)','FontSize',10);
             end
                    
        end
        
        function calcSRMR(obj)
                obj.SRMR_NH = SRMR(obj.audio_reconst,obj.freq_amost);
                obj.SRMR_IC = SRMR_CI(obj.audio_reconst,obj.freq_amost);
        end
        
        
        
    end
    
end

